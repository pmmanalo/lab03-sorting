/*
 * This Java source file was (initially) generated by the Gradle 'init' task.
 */
//@author [Paulo Manalo 20616161]
//@date [2/17/22]
//CS245 Lab03 Sorting

package lab03;
import java.lang.Math;


public class lab03{
    public static int[] arrayGenerator(int datasetSize){
        int[] arr = new int[datasetSize];
        for (int i = 0; i < arr.length; i++) {
           arr[i] = (int)(Math.random() * 10);
        }
        return arr;
    }

    public static void bubbleSort(int[] dataset){
        for (int i = 0; i < dataset.length-1; i++)
            for (int j = 0; j < dataset.length-i-1; j++)
                if (dataset[j] > dataset[j+1])
                {
                    int temp = dataset[j];
                    dataset[j] = dataset[j+1];
                    dataset[j+1] = temp;
                }
    }

    public static void mergesort(int arr[], int left, int right)
    {
        if (left < right) {
            int middle =left + (right-left)/2;
            mergesort(arr, left, middle);
            mergesort(arr, middle + 1, right);
            merge(arr, left, middle, right);
        }
    }
    
    
    public static void merge(int arr[], int left, int middle, int right)
    {
        // size for subarrays
        int sub = middle - left + 1;
        int sub2 = right - middle;
  
        // temporary arrays using subarray sizes
        int Left[] = new int[sub];
        int Right[] = new int[sub2];
  
        //populating the arrays
        for (int j = 0; j < sub2; ++j)
            Right[j] = arr[middle + 1 + j];
        for (int i = 0; i < sub; ++i)
            Left[i] = arr[left + i];
  
        //merge subarray
        int j = 0, i = 0, k = left;
         while ( j < sub2 && i < sub) {
            if (Left[i] <= Right[j]) {
                arr[k] = Left[i];
                i++;
            }
            else {
                arr[k] = Right[j];
                j++;
            }
            k++;
        }
  
        while (i < sub) {
            arr[k] = Left[i];
            k++;
            i++;
        }
  
        while (j < sub2) {
            arr[k] = Right[j];
            k++;
            j++;
        }
    }

    public static long performancealgorithmsComparator(int[] arrsize, int iterations, int size, int firstsecond){
        // TODO: Implement Comparing Algorithms Running Time
    	if(firstsecond == 1) {
	    	int[] arr = arrayGenerator(arrsize[size]);
	    	long startTime = System.currentTimeMillis();

	    	bubbleSort(arr);

	    	long endTime = System.currentTimeMillis();
	    	long duration = endTime-startTime;
	    	return duration;
    	}
    	else{
        	int[] arr = arrayGenerator(arrsize[size]);
	    	long startTime = System.currentTimeMillis();
        	mergesort(arr, 0, arrsize[size]-1);
        	long endTime = System.currentTimeMillis();
	    	long duration = endTime-startTime;
	    	return duration;
        }
    		
    }

    public static String checkPerformanceForMultipleArraySizes(int[] arraySizes, int iterations){
        // TODO: Add code here
        StringBuilder response = new StringBuilder();
        for (int i = 0; i < arraySizes.length; i++){
            // TODO: Add code here and replace <name> on the next line.
            response.append("For dataset of " + Integer.toString(arraySizes[i]) +" numbers firstAlgoPerformance="+performancealgorithmsComparator(arraySizes,10,i,1) + "ms, secondAlgoPerformance=" +performancealgorithmsComparator(arraySizes,10,i,2) + "ms");
            response.append(System.getProperty("line.separator"));
        }
        return response.toString();
    }

    public static void main(String[] args) {
    	int[] arrsizes = new int[]{10000,100000,30000};
    	//performancealgorithmsComparator(arrsizes, 10, 0);
    	String perf = checkPerformanceForMultipleArraySizes(arrsizes, 10);
    	System.out.println(perf);
    	
    	
    }
}